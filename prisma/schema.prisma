generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  stripeCustomerId String? @map("stripe_customer_id")
  stripSubscriptionId String? @map("strip_subscription_id")
  stripePriceId String? @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quest {
  id               String   @id @default(uuid())
  title            String
  description      String?
  difficulty       String?
  questDate        DateTime? @map("quest_date")
  startTime        String?  @map("start_time")
  address          String?
  access           String?
  ticketsAvailable Int?     @map("tickets_available")
  ticketPrice      Float?   @map("ticket_price")
  imageUrl         String?  @map("image_url")
  imagePath        String?  @map("image_path")
  reviews          Json?
  rewardCardNumber String?  @map("reward_card_number")
  rewardCardName   String?  @map("reward_card_name")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  cards            Card[]

  @@map("quests")
}

model Card {
  id         String    @id @default(uuid())
  cardNumber String    @map("card_number")
  cardName   String    @map("card_name")
  questId    String?   @map("quest_id")
  userId     String?   @map("user_id")
  status     String?
  issuedAt   DateTime? @map("issued_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  quest      Quest?    @relation(fields: [questId], references: [id], onDelete: SetNull)
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("cards")
}
